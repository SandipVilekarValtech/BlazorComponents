@page "/authordata"
@using BlazorComponents.Shared
@inject IAuthorService authorService
<PageTitle>Authors</PageTitle>

<h3>Radzen Datagrid Server-side Pagination</h3>

@if (authors == null)
{
    <p>Loading...</p>
}
else
{
    <RadzenDataGrid Data="@authors"
                TItem="AuthorDto"
                AllowFiltering="true"
                AllowColumnResize="true"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                AllowPaging="false"
                Count="@Count"
                @ref="@grid0"
                PageSize="@PageSize">
        <Columns>
            <RadzenDataGridColumn TItem="AuthorDto" Property="FirstName" Title="First Name" />
            <RadzenDataGridColumn TItem="AuthorDto" Property="LastName" Title="Last Name" />
            <RadzenDataGridColumn TItem="AuthorDto" Property="Email" Title="Email" />

        </Columns>
    </RadzenDataGrid>
    <RadzenPager 
        ShowPagingSummary="true" 
        PagingSummaryFormat="@pagingSummaryFormat" 
        HorizontalAlign="HorizontalAlign.Right" 
        Count="@Count" 
        PageSize="@PageSize" 
        PageNumbersCount="5" 
        PageChanged="@PageChanged" />

    <div style="margin-top: -45px; margin-left: 200px;" class="row">
        <div class="col-md-4" style="vertical-align: baseline">
            <RadzenDropDown Data="@(new int[]{10,20,30,40,50})" style="float: right; width: 60px" @bind-Value="@(this.PageSize)"
                        Name="Dropdown0" Change="@Dropdown0Change">
            </RadzenDropDown>
        </div>
    </div>
}

@code {
    string pagingSummaryFormat = "Page {0} of {1} (total {2} records)";
    public IEnumerable<AuthorDto> authors;
    public AuthorDataResult authorsDataResult;
    protected RadzenDataGrid<AuthorDto> grid0;
    int _PageSize;

    protected override async Task OnInitializedAsync()
    {
        PageSize = 10;
        Start = 0;
        Count = 0;

        authorsDataResult = await Task.Run(() => authorService.GetAll(Start, PageSize));
        authors = authorsDataResult.Authors;
        Count = authorsDataResult.Count;
    }
    async void PageChanged(PagerEventArgs args)
    {
        await LoadData(args.Skip, args.Top);
    }
    protected async Task LoadData(int skip, int take)
    {
        authorsDataResult = await Task.Run(() => authorService.GetAll(skip, take));
        authors = authorsDataResult.Authors;
        Count = authorsDataResult.Count;

        await grid0.Reload();

        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected int PageSize
    {
        get
        {
            return _PageSize;
        }
        set
        {
            if (!object.Equals(_PageSize, value))
            {
                _PageSize = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    int _Start;
    protected int Start
    {
        get
        {
            return _Start;
        }
        set
        {
            if (!object.Equals(_Start, value))
            {
                _Start = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    int _Count;
    protected int Count
    {
        get
        {
            return _Count;
        }
        set
        {
            if (!object.Equals(_Count, value))
            {
                _Count = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    protected async Task PrevClick(MouseEventArgs args)
    {
        Start = this.Start - this.PageSize;
        await LoadData(Start, PageSize);
    }

    protected async Task NextClick(MouseEventArgs args)
    {
        Start = this.Start + this.PageSize;
        await LoadData(Start, PageSize);
    }
    protected async Task FirstPage(MouseEventArgs args)
    {
        Start = 0;
        await LoadData(Start, PageSize);
    }
    protected async Task LastPage(MouseEventArgs args)
    {
        Start = this.Count - this.PageSize;
        await LoadData(Start, PageSize);
    }
    protected async Task Dropdown0Change(dynamic args)
    {
        await LoadData(Start, PageSize);
    }
}