@page "/authordata"
@using BlazorComponents.Shared
@inject IAuthorService authorService
<PageTitle>Authors</PageTitle>

<h5>Radzen Datagrid Server-side Pagination</h5>
<hr />
@if (authors == null)
{
    <p>Loading...</p>
}
else
{

    <div class="card">
        <div class="card-header">
            Search Authors

            <div class="card-body">
                <RadzenTextBox @bind-Value=@filterText Placeholder="Search by FirstName OR LastName OR Email" Class="w-50" />
                <RadzenDatePicker Placeholder="Search by Birthdate" style="width: auto;" Name="BirthDate" @bind-Value=@dateNow DateFormat="dd-MM-yyyy" />
                <RadzenButton Text="Search" Click="@Search" /><RadzenButton Text="Reset" Click="@Reset" />

            </div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <div class="card-body">
                    <div class="row" Style="min-height:410px;">
                        <RadzenDataGrid Data="@authors" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    TItem="AuthorDto" AllowFiltering="true" PagerPosition="PagerPosition.Bottom"
                                    AllowColumnResize="true" FilterMode="FilterMode.Advanced"
                                    AllowSorting="true" AllowPaging="false" LoadData="@Grid0LoadData"
                                    Count="@Count" @ref="@grid0" PageSize="@PageSize">
                            <Columns>
                                <RadzenDataGridColumn TItem="AuthorDto" Property="FirstName" Title="First Name" />
                                <RadzenDataGridColumn TItem="AuthorDto" Property="LastName" Title="Last Name" />
                                <RadzenDataGridColumn TItem="AuthorDto" Property="Email" Title="Email" />
                                <RadzenDataGridColumn TItem="AuthorDto" Property="Birthdate" Title="Birth date"
                                                  Type="typeof(DateTime)" FormatString="{0:dd-MM-yyyy}" Width="10%" />
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                    <div class="row">
                        <div class="col-sm-7">
                            <RadzenPager ShowPagingSummary="true"
                                     PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Center"
                                     Count="@Count" PageSize="@PageSize"
                                     PageNumbersCount="5" PageChanged="@PageChanged" />
                        </div>
                        <div class="col-sm-2 rz-paginator-summary">
                            Page Size: <RadzenDropDown Data="@(new int[]{10,20,30,40,50})" @bind-Value="@(this.PageSize)"
                                                  Name="Dropdown0" Change="@Dropdown0Change" Style="width: 50px;top: 10px;" />
                        </div>
                        <div class="col-sm-3 rz-paginator-summary">          
                            Filter Operator: <RadzenRadioButtonList @bind-Value=@LogicalFilterOp
                                               TValue="int"
                                               Change=@((args) => OnChange(args))>
                                <Items>
                                    <RadzenRadioButtonListItem Text="AND" Value="0" />
                                    <RadzenRadioButtonListItem Text="OR" Value="1" />
                                </Items>
                            </RadzenRadioButtonList>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    int LogicalFilterOp = 0;
    DateTime? dateNow = null;// DateTime.Now;
    string pagingSummaryFormat = "Page {0} of {1} (total {2} records)";
    public IEnumerable<AuthorDto> authors;
    public AuthorDataResult authorsDataResult;
    protected RadzenDataGrid<AuthorDto> grid0;
    int _PageSize;

    bool getFiltered = false;
    string filterText = "";
    string orderby = "0";
    string filter = "f";

    protected override async Task OnInitializedAsync()
    {
        PageSize = 10;
        Start = 0;
        Count = 0;

        authorsDataResult = await Task.Run(() => authorService.GetAll(Start, PageSize));
        authors = authorsDataResult.Authors;
        Count = authorsDataResult.Count;
    }

    void OnChange(int value)
    {
        if (value == 0)
        {
            grid0.LogicalFilterOperator = LogicalFilterOperator.And;
        }
        else
        {
            grid0.LogicalFilterOperator = LogicalFilterOperator.Or;
        }
        InvokeAsync(() => { StateHasChanged(); });
    }

    async void PageChanged(PagerEventArgs args)
    {
        //await LoadData(args.Skip, args.Top);

        LoadDataArgs lArgs = new LoadDataArgs()
            {
                Skip = args.Skip,
                Top = args.Top
            };
        await Grid0LoadData(lArgs);
    }
    protected async Task LoadData(int skip, int take)
    {
        if (!getFiltered)
        {
            authorsDataResult = await Task.Run(() => authorService.GetAll(skip, take));
        }
        else
        {
            authorsDataResult = await Task.Run(() => authorService.Search(filterText, dateNow, skip, take));
        }

        authors = authorsDataResult.Authors;
        Count = authorsDataResult.Count;
        //await grid0.Reload();

        await InvokeAsync(() => { StateHasChanged(); });
    }
    protected async Task Grid0LoadData(LoadDataArgs args)
    {
        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            orderby = args.OrderBy;
        }
        if (!string.IsNullOrEmpty(args.Filter))
        {
            filter = args.Filter;
        }

        authorsDataResult = await Task.Run(() => authorService.GridSearch(string.IsNullOrEmpty(filterText) ? "f" : filterText, dateNow, filter, orderby, Convert.ToInt32(args.Skip), Convert.ToInt32(args.Top)));

        authors = authorsDataResult.Authors;
        Count = authorsDataResult.Count;
        //await grid0.Reload();

        await InvokeAsync(() => { StateHasChanged(); });
    }
    protected int PageSize
    {
        get
        {
            return _PageSize;
        }
        set
        {
            if (!object.Equals(_PageSize, value))
            {
                _PageSize = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    int _Start;
    protected int Start
    {
        get
        {
            return _Start;
        }
        set
        {
            if (!object.Equals(_Start, value))
            {
                _Start = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    int _Count;
    protected int Count
    {
        get
        {
            return _Count;
        }
        set
        {
            if (!object.Equals(_Count, value))
            {
                _Count = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    protected async Task Dropdown0Change(dynamic args)
    {
        //await LoadData(Start, PageSize);
        LoadDataArgs lArgs = new LoadDataArgs()
            {
                Skip = Start,
                Top = PageSize
            };
        await Grid0LoadData(lArgs);
    }
    protected async Task Search()
    {
        getFiltered = true;

        //await LoadData(Start, PageSize);
        LoadDataArgs lArgs = new LoadDataArgs()
            {
                Skip = Start,
                Top = PageSize
            };
        await Grid0LoadData(lArgs);
    }
    protected async Task Reset()
    {
        getFiltered = false;
        filterText = "";
        dateNow = null;
        Start = 0;
        //await LoadData(Start, PageSize);
        //await grid0.Reload();

        LoadDataArgs lArgs = new LoadDataArgs()
            {
                Skip = Start,
                Top = PageSize
            };
        await Grid0LoadData(lArgs);
    }
}