@page "/authordata"
@using BlazorComponents.Shared
@inject IAuthorService authorService
<PageTitle>Authors</PageTitle>

<h1>Authors</h1>

@if (authors == null)
{
    <p>Loading...</p>
}
else
{
    <RadzenDataGrid Data="@authors"
                TItem="AuthorDto"
                AllowFiltering="true"
                AllowColumnResize="true"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                AllowPaging="false"
                Count="@Count"
                @ref="@grid0"
                PageSize="@PageSize">
        <Columns>
            <RadzenDataGridColumn TItem="AuthorDto" Property="FirstName" Title="First Name" />
            <RadzenDataGridColumn TItem="AuthorDto" Property="LastName" Title="Last Name" />
            <RadzenDataGridColumn TItem="AuthorDto" Property="Email" Title="Email" />

        </Columns>
    </RadzenDataGrid>

    <div style="margin-top: 10px" class="row">
        
        <div class="col-md-4">
            <RadzenButton class="rz-paginator-first rz-paginator-element  
                " Icon="first" Click="@FirstPage">
            </RadzenButton>
            <RadzenButton Icon="skip_previous" Click="@PrevClick">
            </RadzenButton>
            <RadzenButton Icon="skip_next" style="margin-left: 20px" Click="@NextClick">
            </RadzenButton>
            <RadzenButton class="rz-paginator-last rz-paginator-element " Icon="last" Click="@LastPage">
            </RadzenButton>
        </div>
        
        <div class="col-md-4">
            <RadzenLabel Text="@($"Showing records from {this.Start} to {this.Start + this.PageSize} of {this.Count}")">
            </RadzenLabel>
        </div>
        <div class="col-md-4" style="vertical-align: baseline">
            <RadzenDropDown Data="@(new int[]{10,20,30,40,50})" style="float: right; width: 60px" @bind-Value="@(this.PageSize)"
                        Name="Dropdown0" Change="@Dropdown0Change">
            </RadzenDropDown>
        </div>
    </div>
}

@code {
    public IEnumerable<AuthorDto> authors;

    protected override async Task OnInitializedAsync()
    {
        PageSize = 10;
        Start = 0;
        Count = 0;

        //authors = await Task.Run(() => authorService.GetAll(0, 5));
        //Count = await Task.Run(() => authorService.GetCount());
        await LoadData(Start, PageSize);
    }

    protected async Task LoadData(int skip, int take)
    {
        authors = await Task.Run(() => authorService.GetAll(skip, take));
        Count = authors.Count();

        await grid0.Reload();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected RadzenDataGrid<AuthorDto> grid0;
    int _PageSize;

    protected int PageSize
    {
        get
        {
            return _PageSize;
        }
        set
        {
            if (!object.Equals(_PageSize, value))
            {
                _PageSize = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    int _Start;
    protected int Start
    {
        get
        {
            return _Start;
        }
        set
        {
            if (!object.Equals(_Start, value))
            {
                _Start = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    int _Count;
    protected int Count
    {
        get
        {
            return _Count;
        }
        set
        {
            if (!object.Equals(_Count, value))
            {
                _Count = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    IEnumerable<AuthorDto> _authorDto;

    protected IEnumerable<AuthorDto> getAuthorResult
    {
        get
        {
            return _authorDto;
        }
        set
        {
            if (!object.Equals(_authorDto, value))
            {
                _authorDto = value;
                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }



    protected async Task PrevClick(MouseEventArgs args)
    {
        //if (this.Start - this.PageSize >= 0)
        //{
        //    Start = this.Start - this.PageSize;
        //}
        Start = this.Start - this.PageSize;
        await LoadData(Start, PageSize);
    }

    protected async Task NextClick(MouseEventArgs args)
    {
        //if (this.Start + this.PageSize <= this.Count - this.PageSize)
        //{
        //    Start = this.Start + this.PageSize;
        //}
        Start = this.Start + this.PageSize;
        await LoadData(Start, PageSize);
    }
    protected async Task FirstPage(MouseEventArgs args)
    {
        Start = 0;
        await LoadData(Start, PageSize);
    }
    protected async Task LastPage(MouseEventArgs args)
    {
        
    }
    protected async Task Dropdown0Change(dynamic args)
    {
        await LoadData(Start, PageSize);
    }
}